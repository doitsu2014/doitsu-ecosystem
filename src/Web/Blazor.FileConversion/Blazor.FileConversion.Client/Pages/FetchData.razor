@page "/kiem-tra-du-lieu"
@using Blazor.FileConversion.Client.HttpClients.FileConversion
@using Blazor.FileConversion.Client.Models
@using System.Net.Http.Headers
@using System.Collections.Immutable
@using Microsoft.Extensions.Logging
@using System.Reactive.Subjects
@using System.Reactive.Linq
@using System
@using System.Text.Json
@using System.Text.Json.Serialization

@inject IFileConversionHttpClient Client
@inject ILogger<FetchData> Logger

<h1>Khu vực trích xuất và kiểm tra dữ liệu</h1>
<AuthorizeView>
    <Authorized>
        <div class="row">
            <div class="col-md-6 col-sm-12">
                <div class="col-md-12 p-lg-2 border-primary">
                    <p>Bước 1: chọn File phù hợp từ máy tính của bạn.</p>
                    <InputFile OnChange="@OnInputFileChange"/>
                </div>
                <div class="col-md-12 p-lg-2 border-primary border-0">
                    <p>Bước 2: nhập thông tin đối soát dữ liệu</p>
                    <div class="form-row">
                        <div class="form-group col-md-12">
                            <label for="txtFilterShipingCode">Mã vận chuyển: </label>
                            <input class="form-control" id="txtFilterShipingCode" @bind="@FilterShippingCode"/>
                        </div>

                        <div class="form-group col-md-10">
                            <label for="txtMatchingSKU">SKU của phân loại sản phẩm: </label>
                            <input class="form-control" @oninput="@TxtMatchingSKUSubject.OnNext" @bind="@TxtMatchingSkuValue" @ref="txtMatchingSku"/>
                        </div>

                        <div class="form-group col-md-2">
                            <button class="btn btn-primary" style="margin-top: 32px;" @ref="btnMatchingSkuEnter" @onclick="OnBtnMatchingProductSku">Nhập</button>
                        </div>
                        @if (_filterDictionaryProducts.Count > 0)
                        {
                            @foreach (var entry in _filterDictionaryProducts)
                            {
                                <div class="form-group col-md-10">
                                    <input class="form-control" disabled="disabled" value="@entry.Key"/>
                                </div>
                                <div class="form-group col-md-2">
                                    <input class="form-control" disabled="disabled" type="number" value="@entry.Value.FilterProductQuantity"/>
                                </div>
                            }
                        }
                       
                        @if (string.IsNullOrEmpty(_error))
                        {
                            <p style="color: #ff0000">@_error</p>
                        }
                        <div class="form-group col-md-12">
                            <button type="button" class="btn btn-danger" @onclick="OnResetButtonClick">
                                Làm lại
                            </button>

                            <button type="button" class="btn btn-primary" @onclick="OnSubmitButtonClick">
                                Xác nhận dữ liệu
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            @* Show List Items *@
            <div class="col-md-6 col-sm-12">
                @if (_filteredData != null && !_filteredData.IsEmpty)
                {
                    @foreach (var item in _filteredData)
                    {
                        <div class="col-sm-12 pb-4">
                            <div class="card">
                                <div class="card-header">
                                    <p>Mã vận chuyển: @item.ShippingCode</p>
                                    <p>Mã đơn: @item.OrderCode</p>
                                </div>
                                <div class="card-body">
                                    <ul class="list-group list-group-flush">
                                        @foreach (var product in @item.Products)
                                        {
                                            <li class="list-group-item">
                                                <p>SKU sản phẩm: @product.Sku</p>
                                                <p>Tên sản phẩm: @product.Name</p>
                                                <p>Số lượng: @product.Quantity</p>
                                                <p>Giá: @product.Price</p>
                                                <p>Phân loại sản phẩm: @product.CategoryName</p>
                                                <p>SKU phân loại sản phẩm: @product.CategorySku</p>
                                            </li>
                                        }
                                    </ul>
                                </div>
                                <div class="card-footer">

                                    <p>Phản hồi: @item.Feedback</p>
                                    <p>Ghi chú: @item.Note</p>
                                </div>
                            </div>
                        </div>
                        <hr/>
                    }
                }
                else
                {
                    <p style="color: red">Không tìm thấy thông tin phù hợp</p>
                }

            </div>
        </div>


    </Authorized>
    <NotAuthorized>
        <p>Bạn cần phải đăng nhập để sử dụng tính năng này</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    private Subject<ChangeEventArgs> TxtMatchingSKUSubject = new();
    public string TxtMatchingSkuValue { get; set; }
    private ElementReference btnMatchingSkuEnter;
    private ElementReference txtMatchingSku;

    class FilterProduct
    {
        public string FilterCategorySku { get; set; } = string.Empty;
        public int FilterProductQuantity { get; set; } = 0;
    }

    private ImmutableList<PackagingDocument> _data = ImmutableList<PackagingDocument>.Empty;
    private ImmutableList<PackagingDocument> _filteredData = ImmutableList<PackagingDocument>.Empty;
    private Dictionary<string, FilterProduct> _filterDictionaryProducts = new Dictionary<string, FilterProduct>();

    private int _numberOfProduct = 0;
    private string FilterShippingCode { get; set; } = string.Empty;
    private string _error;

    protected override async Task OnInitializedAsync()
    {
        TxtMatchingSKUSubject
            .Throttle(TimeSpan.FromMilliseconds(200))
            .Select(e => (string?) e.Value)
            .Select(v => v?.Trim())
            .Subscribe(async ts =>
            {
                Logger.LogInformation(ts);
                await btnMatchingSkuEnter.FocusAsync();
                StateHasChanged();
            });
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles();
        foreach (var file in files)
        {
            using (var ms = file.OpenReadStream(file.Size))
            {
                var content = new MultipartFormDataContent();
                content.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");
                content.Add(new StreamContent(ms, Convert.ToInt32(file.Size)), "file", file.Name);
                _data = await Client.ParsePackagingDocumentAsync(content);
                _filteredData = _filteredData.AddRange(_data);
            }
        }
    }

    private Task OnSubmitButtonClick(MouseEventArgs e)
    {
        if (string.IsNullOrEmpty(FilterShippingCode))
        {
            _error = "Phải nhập Mã vân chuyển";
        }
        else
        {
            var filterProducts = _filterDictionaryProducts.Select(e => e.Value).ToList();
            _error = string.Empty;
            _filteredData = _data
                .Where(pd => (pd.ShippingCode.Equals(FilterShippingCode.Trim(), StringComparison.OrdinalIgnoreCase))
                             && filterProducts.All(fp => pd.Products.Any(p 
                                 => fp.FilterCategorySku
                                     .Trim()
                                     .Equals(p.CategorySku, StringComparison.OrdinalIgnoreCase) 
                                    && fp.FilterProductQuantity == p.Quantity))
                )
                .ToImmutableList();
        }

        return Task.CompletedTask;
    }

    private async Task OnBtnMatchingProductSku(MouseEventArgs e)
    {
        if (!_filterDictionaryProducts.ContainsKey(TxtMatchingSkuValue))
        {
            _filterDictionaryProducts.Add(TxtMatchingSkuValue, new FilterProduct()
            {
                FilterCategorySku = TxtMatchingSkuValue,
                FilterProductQuantity = 1
            });
        }
        else
        {
            _filterDictionaryProducts[TxtMatchingSkuValue].FilterProductQuantity += 1;
        }

        TxtMatchingSkuValue = string.Empty;
        await txtMatchingSku.FocusAsync();
        StateHasChanged();
    }

    private Task OnResetButtonClick(MouseEventArgs e)
    {
        _error = string.Empty;
        _filteredData = _data;
        _filterDictionaryProducts = new Dictionary<string, FilterProduct>();
        _numberOfProduct = 0;
        FilterShippingCode = string.Empty;
        return Task.CompletedTask;
    }

}